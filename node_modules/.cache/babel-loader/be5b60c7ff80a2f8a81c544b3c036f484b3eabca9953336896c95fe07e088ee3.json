{"ast":null,"code":"const analyzeImageWithGoogleVision = async imageFile => {\n  const apiKey = process.env.REACT_APP_GOOGLE_CLOUD_API_KEY;\n  if (!apiKey) {\n    throw new Error('Google Cloud API key not found');\n  }\n  try {\n    var _data$responses$0$lab, _data$responses$0$loc;\n    const base64Image = await new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        if (typeof reader.result === 'string') {\n          resolve(reader.result.split(',')[1]);\n        }\n      };\n      reader.onerror = reject;\n      reader.readAsDataURL(imageFile);\n    });\n    const requestBody = {\n      requests: [{\n        image: {\n          content: base64Image\n        },\n        features: [{\n          type: 'OBJECT_LOCALIZATION',\n          maxResults: 50 // Increased for multiple objects\n        }, {\n          type: 'LABEL_DETECTION',\n          maxResults: 50\n        }]\n      }]\n    };\n    const response = await fetch(`https://vision.googleapis.com/v1/images:annotate?key=${apiKey}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`API Error: ${response.status} - ${errorText}`);\n    }\n    const data = await response.json();\n    const detectedItems = new Set();\n    const allDetectedLabels = [];\n\n    // Process labels with special handling for fruits\n    (_data$responses$0$lab = data.responses[0].labelAnnotations) === null || _data$responses$0$lab === void 0 ? void 0 : _data$responses$0$lab.forEach(label => {\n      const name = label.description.toLowerCase();\n      allDetectedLabels.push(`${name} (${(label.score * 100).toFixed(1)}%)`);\n\n      // Special handling for fruits - lower threshold\n      if (knownIngredients.fruits.has(name) && label.score > 0.4) {\n        detectedItems.add(name);\n      } else if (label.score > 0.5) {\n        // Standard threshold for non-fruits\n        const ingredient = findIngredient(name);\n        if (ingredient) {\n          detectedItems.add(ingredient);\n        }\n      }\n    });\n\n    // Process objects with special handling for fruits\n    (_data$responses$0$loc = data.responses[0].localizedObjectAnnotations) === null || _data$responses$0$loc === void 0 ? void 0 : _data$responses$0$loc.forEach(obj => {\n      const name = obj.name.toLowerCase();\n      allDetectedLabels.push(`${name} (${(obj.score * 100).toFixed(1)}%)`);\n\n      // Special handling for fruits - lower threshold\n      if (knownIngredients.fruits.has(name) && obj.score > 0.4) {\n        detectedItems.add(name);\n      } else if (obj.score > 0.5) {\n        // Standard threshold for non-fruits\n        const ingredient = findIngredient(name);\n        if (ingredient) {\n          detectedItems.add(ingredient);\n        }\n      }\n    });\n\n    // Update detected labels for display\n    setDetectedLabels(allDetectedLabels);\n    console.log('Detected items:', Array.from(detectedItems)); // Debug log\n    return Array.from(detectedItems);\n  } catch (error) {\n    console.error('Error analyzing image:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["analyzeImageWithGoogleVision","imageFile","apiKey","process","env","REACT_APP_GOOGLE_CLOUD_API_KEY","Error","_data$responses$0$lab","_data$responses$0$loc","base64Image","Promise","resolve","reject","reader","FileReader","onload","result","split","onerror","readAsDataURL","requestBody","requests","image","content","features","type","maxResults","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","status","data","json","detectedItems","Set","allDetectedLabels","responses","labelAnnotations","forEach","label","name","description","toLowerCase","push","score","toFixed","knownIngredients","fruits","has","add","ingredient","findIngredient","localizedObjectAnnotations","obj","setDetectedLabels","console","log","Array","from","error"],"sources":["/Users/sanjith/ingrediate1/src/CameraDetection.tsx"],"sourcesContent":["const analyzeImageWithGoogleVision = async (imageFile: File) => {\n    const apiKey = process.env.REACT_APP_GOOGLE_CLOUD_API_KEY;\n    if (!apiKey) {\n      throw new Error('Google Cloud API key not found');\n    }\n\n    try {\n      const base64Image = await new Promise<string>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            resolve(reader.result.split(',')[1]);\n          }\n        };\n        reader.onerror = reject;\n        reader.readAsDataURL(imageFile);\n      });\n\n      const requestBody = {\n        requests: [{\n          image: { content: base64Image },\n          features: [\n            { \n              type: 'OBJECT_LOCALIZATION', \n              maxResults: 50  // Increased for multiple objects\n            },\n            { \n              type: 'LABEL_DETECTION', \n              maxResults: 50\n            }\n          ]\n        }]\n      };\n\n      const response = await fetch(\n        `https://vision.googleapis.com/v1/images:annotate?key=${apiKey}`,\n        {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(requestBody)\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`API Error: ${response.status} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      const detectedItems = new Set<string>();\n      const allDetectedLabels: string[] = [];\n\n      // Process labels with special handling for fruits\n      data.responses[0].labelAnnotations?.forEach((label: { description: string, score: number }) => {\n        const name = label.description.toLowerCase();\n        allDetectedLabels.push(`${name} (${(label.score * 100).toFixed(1)}%)`);\n        \n        // Special handling for fruits - lower threshold\n        if (knownIngredients.fruits.has(name) && label.score > 0.4) {\n          detectedItems.add(name);\n        } else if (label.score > 0.5) { // Standard threshold for non-fruits\n          const ingredient = findIngredient(name);\n          if (ingredient) {\n            detectedItems.add(ingredient);\n          }\n        }\n      });\n\n      // Process objects with special handling for fruits\n      data.responses[0].localizedObjectAnnotations?.forEach((obj: { name: string, score: number }) => {\n        const name = obj.name.toLowerCase();\n        allDetectedLabels.push(`${name} (${(obj.score * 100).toFixed(1)}%)`);\n        \n        // Special handling for fruits - lower threshold\n        if (knownIngredients.fruits.has(name) && obj.score > 0.4) {\n          detectedItems.add(name);\n        } else if (obj.score > 0.5) { // Standard threshold for non-fruits\n          const ingredient = findIngredient(name);\n          if (ingredient) {\n            detectedItems.add(ingredient);\n          }\n        }\n      });\n\n      // Update detected labels for display\n      setDetectedLabels(allDetectedLabels);\n\n      console.log('Detected items:', Array.from(detectedItems)); // Debug log\n      return Array.from(detectedItems);\n\n    } catch (error) {\n      console.error('Error analyzing image:', error);\n      throw error;\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}