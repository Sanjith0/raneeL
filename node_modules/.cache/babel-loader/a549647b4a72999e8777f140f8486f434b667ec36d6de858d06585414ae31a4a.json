{"ast":null,"code":"export const fetchPlacesData = async (address, apiKey) => {\n  try {\n    // First, get the coordinates for the address using Geocoding API\n    const geocodeUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${apiKey}`;\n    const geocodeResponse = await fetch(geocodeUrl);\n    const geocodeData = await geocodeResponse.json();\n    if (geocodeData.status !== 'OK') {\n      throw new Error('Failed to geocode address');\n    }\n    const {\n      lat,\n      lng\n    } = geocodeData.results[0].geometry.location;\n\n    // Now get nearby places\n    const placesUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=1500&key=${apiKey}`;\n    const placesResponse = await fetch(placesUrl);\n    const placesData = await placesResponse.json();\n\n    // Get place details for the exact location\n    const placeDetailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${geocodeData.results[0].place_id}&fields=rating,user_ratings_total,formatted_address,geometry&key=${apiKey}`;\n    const detailsResponse = await fetch(placeDetailsUrl);\n    const detailsData = await detailsResponse.json();\n    return {\n      coordinates: {\n        lat,\n        lng\n      },\n      nearbyPlaces: placesData.results,\n      placeDetails: detailsData.result,\n      formattedAddress: geocodeData.results[0].formatted_address\n    };\n  } catch (error) {\n    console.error('Error fetching places data:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["fetchPlacesData","address","apiKey","geocodeUrl","encodeURIComponent","geocodeResponse","fetch","geocodeData","json","status","Error","lat","lng","results","geometry","location","placesUrl","placesResponse","placesData","placeDetailsUrl","place_id","detailsResponse","detailsData","coordinates","nearbyPlaces","placeDetails","result","formattedAddress","formatted_address","error","console"],"sources":["/Users/sanjith/ingrediate1/src/googlePlacesService.js"],"sourcesContent":["export const fetchPlacesData = async (address, apiKey) => {\n    try {\n      // First, get the coordinates for the address using Geocoding API\n      const geocodeUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${apiKey}`;\n      const geocodeResponse = await fetch(geocodeUrl);\n      const geocodeData = await geocodeResponse.json();\n  \n      if (geocodeData.status !== 'OK') {\n        throw new Error('Failed to geocode address');\n      }\n  \n      const { lat, lng } = geocodeData.results[0].geometry.location;\n  \n      // Now get nearby places\n      const placesUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=1500&key=${apiKey}`;\n      const placesResponse = await fetch(placesUrl);\n      const placesData = await placesResponse.json();\n  \n      // Get place details for the exact location\n      const placeDetailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${geocodeData.results[0].place_id}&fields=rating,user_ratings_total,formatted_address,geometry&key=${apiKey}`;\n      const detailsResponse = await fetch(placeDetailsUrl);\n      const detailsData = await detailsResponse.json();\n  \n      return {\n        coordinates: { lat, lng },\n        nearbyPlaces: placesData.results,\n        placeDetails: detailsData.result,\n        formattedAddress: geocodeData.results[0].formatted_address\n      };\n    } catch (error) {\n      console.error('Error fetching places data:', error);\n      throw error;\n    }\n  };"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG,MAAAA,CAAOC,OAAO,EAAEC,MAAM,KAAK;EACtD,IAAI;IACF;IACA,MAAMC,UAAU,GAAG,6DAA6DC,kBAAkB,CAACH,OAAO,CAAC,QAAQC,MAAM,EAAE;IAC3H,MAAMG,eAAe,GAAG,MAAMC,KAAK,CAACH,UAAU,CAAC;IAC/C,MAAMI,WAAW,GAAG,MAAMF,eAAe,CAACG,IAAI,CAAC,CAAC;IAEhD,IAAID,WAAW,CAACE,MAAM,KAAK,IAAI,EAAE;MAC/B,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;IAC9C;IAEA,MAAM;MAAEC,GAAG;MAAEC;IAAI,CAAC,GAAGL,WAAW,CAACM,OAAO,CAAC,CAAC,CAAC,CAACC,QAAQ,CAACC,QAAQ;;IAE7D;IACA,MAAMC,SAAS,GAAG,yEAAyEL,GAAG,IAAIC,GAAG,oBAAoBV,MAAM,EAAE;IACjI,MAAMe,cAAc,GAAG,MAAMX,KAAK,CAACU,SAAS,CAAC;IAC7C,MAAME,UAAU,GAAG,MAAMD,cAAc,CAACT,IAAI,CAAC,CAAC;;IAE9C;IACA,MAAMW,eAAe,GAAG,oEAAoEZ,WAAW,CAACM,OAAO,CAAC,CAAC,CAAC,CAACO,QAAQ,oEAAoElB,MAAM,EAAE;IACvM,MAAMmB,eAAe,GAAG,MAAMf,KAAK,CAACa,eAAe,CAAC;IACpD,MAAMG,WAAW,GAAG,MAAMD,eAAe,CAACb,IAAI,CAAC,CAAC;IAEhD,OAAO;MACLe,WAAW,EAAE;QAAEZ,GAAG;QAAEC;MAAI,CAAC;MACzBY,YAAY,EAAEN,UAAU,CAACL,OAAO;MAChCY,YAAY,EAAEH,WAAW,CAACI,MAAM;MAChCC,gBAAgB,EAAEpB,WAAW,CAACM,OAAO,CAAC,CAAC,CAAC,CAACe;IAC3C,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}