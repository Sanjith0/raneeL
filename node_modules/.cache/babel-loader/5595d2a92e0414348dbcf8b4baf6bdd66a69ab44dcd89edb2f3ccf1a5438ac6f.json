{"ast":null,"code":"// Create a new file called googlePlacesService.js\nexport const fetchPlacesData = async (address, apiKey) => {\n  try {\n    // First, get the coordinates for the address using Geocoding API\n    const geocodeUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${apiKey}`;\n    const geocodeResponse = await fetch(geocodeUrl);\n    const geocodeData = await geocodeResponse.json();\n    if (geocodeData.status !== 'OK') {\n      throw new Error('Failed to geocode address');\n    }\n    const {\n      lat,\n      lng\n    } = geocodeData.results[0].geometry.location;\n\n    // Now get nearby places\n    const placesUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=1500&key=${apiKey}`;\n    const placesResponse = await fetch(placesUrl);\n    const placesData = await placesResponse.json();\n\n    // Get place details for the exact location\n    const placeDetailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${geocodeData.results[0].place_id}&fields=rating,user_ratings_total,formatted_address,geometry&key=${apiKey}`;\n    const detailsResponse = await fetch(placeDetailsUrl);\n    const detailsData = await detailsResponse.json();\n    return {\n      coordinates: {\n        lat,\n        lng\n      },\n      nearbyPlaces: placesData.results,\n      placeDetails: detailsData.result,\n      formattedAddress: geocodeData.results[0].formatted_address\n    };\n  } catch (error) {\n    console.error('Error fetching places data:', error);\n    throw error;\n  }\n};\n\n// Create a file called analysisUtils.js\nexport const calculateScores = placesData => {\n  let scores = {\n    environmental: {\n      score: 0,\n      details: {}\n    },\n    education: {\n      score: 0,\n      details: {}\n    },\n    poi: {\n      score: 0,\n      details: {}\n    },\n    sentiment: {\n      score: 0,\n      details: {}\n    },\n    market: {\n      score: 0,\n      details: {}\n    }\n  };\n\n  // Calculate POI score\n  const nearbyPlaces = placesData.nearbyPlaces;\n  const poiCategories = {\n    shopping: 0,\n    restaurant: 0,\n    school: 0,\n    park: 0,\n    transport: 0\n  };\n  nearbyPlaces.forEach(place => {\n    place.types.forEach(type => {\n      if (type.includes('shop') || type.includes('store')) poiCategories.shopping++;\n      if (type.includes('restaurant') || type.includes('food')) poiCategories.restaurant++;\n      if (type.includes('school')) poiCategories.school++;\n      if (type.includes('park')) poiCategories.park++;\n      if (type.includes('transit') || type.includes('transport')) poiCategories.transport++;\n    });\n  });\n\n  // Calculate POI score (out of 200)\n  scores.poi.score = Math.min(200, poiCategories.shopping * 10 + poiCategories.restaurant * 10 + poiCategories.school * 15 + poiCategories.park * 15 + poiCategories.transport * 10);\n  scores.poi.details = {\n    shoppingVenues: poiCategories.shopping,\n    restaurants: poiCategories.restaurant,\n    schools: poiCategories.school,\n    parks: poiCategories.park,\n    transportHubs: poiCategories.transport\n  };\n\n  // Calculate sentiment score based on place ratings\n  const averageRating = placesData.placeDetails.rating || 0;\n  const totalRatings = placesData.placeDetails.user_ratings_total || 0;\n  scores.sentiment.score = Math.min(200, Math.round(averageRating / 5 * 150 + Math.min(50, totalRatings / 10)));\n  scores.sentiment.details = {\n    averageRating: averageRating.toFixed(1),\n    totalReviews: totalRatings,\n    communityEngagement: totalRatings > 100 ? 'High' : totalRatings > 50 ? 'Medium' : 'Low'\n  };\n  return scores;\n};","map":{"version":3,"names":["fetchPlacesData","address","apiKey","geocodeUrl","encodeURIComponent","geocodeResponse","fetch","geocodeData","json","status","Error","lat","lng","results","geometry","location","placesUrl","placesResponse","placesData","placeDetailsUrl","place_id","detailsResponse","detailsData","coordinates","nearbyPlaces","placeDetails","result","formattedAddress","formatted_address","error","console","calculateScores","scores","environmental","score","details","education","poi","sentiment","market","poiCategories","shopping","restaurant","school","park","transport","forEach","place","types","type","includes","Math","min","shoppingVenues","restaurants","schools","parks","transportHubs","averageRating","rating","totalRatings","user_ratings_total","round","toFixed","totalReviews","communityEngagement"],"sources":["/Users/sanjith/ingrediate1/src/googlePlacesService.js"],"sourcesContent":["// Create a new file called googlePlacesService.js\nexport const fetchPlacesData = async (address, apiKey) => {\n    try {\n      // First, get the coordinates for the address using Geocoding API\n      const geocodeUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${apiKey}`;\n      const geocodeResponse = await fetch(geocodeUrl);\n      const geocodeData = await geocodeResponse.json();\n  \n      if (geocodeData.status !== 'OK') {\n        throw new Error('Failed to geocode address');\n      }\n  \n      const { lat, lng } = geocodeData.results[0].geometry.location;\n  \n      // Now get nearby places\n      const placesUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=1500&key=${apiKey}`;\n      const placesResponse = await fetch(placesUrl);\n      const placesData = await placesResponse.json();\n  \n      // Get place details for the exact location\n      const placeDetailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${geocodeData.results[0].place_id}&fields=rating,user_ratings_total,formatted_address,geometry&key=${apiKey}`;\n      const detailsResponse = await fetch(placeDetailsUrl);\n      const detailsData = await detailsResponse.json();\n  \n      return {\n        coordinates: { lat, lng },\n        nearbyPlaces: placesData.results,\n        placeDetails: detailsData.result,\n        formattedAddress: geocodeData.results[0].formatted_address\n      };\n    } catch (error) {\n      console.error('Error fetching places data:', error);\n      throw error;\n    }\n  };\n  \n  // Create a file called analysisUtils.js\n  export const calculateScores = (placesData) => {\n    let scores = {\n      environmental: {\n        score: 0,\n        details: {}\n      },\n      education: {\n        score: 0,\n        details: {}\n      },\n      poi: {\n        score: 0,\n        details: {}\n      },\n      sentiment: {\n        score: 0,\n        details: {}\n      },\n      market: {\n        score: 0,\n        details: {}\n      }\n    };\n  \n    // Calculate POI score\n    const nearbyPlaces = placesData.nearbyPlaces;\n    const poiCategories = {\n      shopping: 0,\n      restaurant: 0,\n      school: 0,\n      park: 0,\n      transport: 0\n    };\n  \n    nearbyPlaces.forEach(place => {\n      place.types.forEach(type => {\n        if (type.includes('shop') || type.includes('store')) poiCategories.shopping++;\n        if (type.includes('restaurant') || type.includes('food')) poiCategories.restaurant++;\n        if (type.includes('school')) poiCategories.school++;\n        if (type.includes('park')) poiCategories.park++;\n        if (type.includes('transit') || type.includes('transport')) poiCategories.transport++;\n      });\n    });\n  \n    // Calculate POI score (out of 200)\n    scores.poi.score = Math.min(200, \n      (poiCategories.shopping * 10) +\n      (poiCategories.restaurant * 10) +\n      (poiCategories.school * 15) +\n      (poiCategories.park * 15) +\n      (poiCategories.transport * 10)\n    );\n  \n    scores.poi.details = {\n      shoppingVenues: poiCategories.shopping,\n      restaurants: poiCategories.restaurant,\n      schools: poiCategories.school,\n      parks: poiCategories.park,\n      transportHubs: poiCategories.transport\n    };\n  \n    // Calculate sentiment score based on place ratings\n    const averageRating = placesData.placeDetails.rating || 0;\n    const totalRatings = placesData.placeDetails.user_ratings_total || 0;\n    \n    scores.sentiment.score = Math.min(200, Math.round((averageRating / 5) * 150 + \n      Math.min(50, totalRatings / 10)));\n    \n    scores.sentiment.details = {\n      averageRating: averageRating.toFixed(1),\n      totalReviews: totalRatings,\n      communityEngagement: totalRatings > 100 ? 'High' : totalRatings > 50 ? 'Medium' : 'Low'\n    };\n  \n    return scores;\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}