{"ast":null,"code":"import React,{useState,useRef}from'react';import{Camera,Upload}from'lucide-react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CameraDetection=_ref=>{let{onIngredientsDetected}=_ref;const[processing,setProcessing]=useState(false);const[error,setError]=useState(null);const[detectedLabels,setDetectedLabels]=useState([]);const fileInputRef=useRef(null);// Expanded ingredients list with categories\nconst knownIngredients={fruits:new Set(['orange','apple','banana','lemon','grape','strawberry','blueberry','raspberry','mango','pineapple','pear','avocado']),vegetables:new Set(['tomato','onion','garlic','lettuce','carrot','potato','cucumber','bell pepper','broccoli','spinach','celery','mushroom','zucchini','cabbage','cauliflower']),proteins:new Set(['chicken','beef','pork','fish','salmon','tuna','shrimp','egg','tofu','meat','protein','poultry']),pantry:new Set(['rice','pasta','bread','flour','sugar','salt','pepper','oil','vinegar','sauce','spice','herb','grain'])};// More comprehensive synonym mapping\nconst ingredientSynonyms={'orange':['citrus','citrus fruit','mandarin','tangerine','clementine'],'bell pepper':['pepper','capsicum','sweet pepper'],'onion':['green onion','scallion','spring onion','red onion','white onion'],'potato':['potatoes','spud','sweet potato','yam'],'tomato':['tomatoes','cherry tomato','roma tomato'],'carrot':['carrots','baby carrot'],'apple':['green apple','red apple','fruit']};const findIngredient=label=>{label=label.toLowerCase();// Check direct matches in all categories\nfor(const[category,ingredients]of Object.entries(knownIngredients)){if(ingredients.has(label)){return label;}}// Check synonyms\nfor(const[mainIngredient,synonyms]of Object.entries(ingredientSynonyms)){if(synonyms.includes(label)){return mainIngredient;}}return null;};const analyzeImageWithGoogleVision=async imageFile=>{const apiKey=process.env.REACT_APP_GOOGLE_CLOUD_API_KEY;if(!apiKey){throw new Error('Google Cloud API key not found');}try{var _data$responses$0$lab,_data$responses$0$loc;const base64Image=await new Promise((resolve,reject)=>{const reader=new FileReader();reader.onload=()=>{if(typeof reader.result==='string'){resolve(reader.result.split(',')[1]);}};reader.onerror=reject;reader.readAsDataURL(imageFile);});const requestBody={requests:[{image:{content:base64Image},features:[{type:'OBJECT_LOCALIZATION',maxResults:50// Increased for multiple objects\n},{type:'LABEL_DETECTION',maxResults:50}]}]};const response=await fetch(`https://vision.googleapis.com/v1/images:annotate?key=${apiKey}`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody)});if(!response.ok){const errorText=await response.text();throw new Error(`API Error: ${response.status} - ${errorText}`);}const data=await response.json();const detectedItems=new Set();const allDetectedLabels=[];// Process labels with special handling for fruits\n(_data$responses$0$lab=data.responses[0].labelAnnotations)===null||_data$responses$0$lab===void 0?void 0:_data$responses$0$lab.forEach(label=>{const name=label.description.toLowerCase();allDetectedLabels.push(`${name} (${(label.score*100).toFixed(1)}%)`);// Special handling for fruits - lower threshold\nif(knownIngredients.fruits.has(name)&&label.score>0.4){detectedItems.add(name);}else if(label.score>0.5){// Standard threshold for non-fruits\nconst ingredient=findIngredient(name);if(ingredient){detectedItems.add(ingredient);}}});// Process objects with special handling for fruits\n(_data$responses$0$loc=data.responses[0].localizedObjectAnnotations)===null||_data$responses$0$loc===void 0?void 0:_data$responses$0$loc.forEach(obj=>{const name=obj.name.toLowerCase();allDetectedLabels.push(`${name} (${(obj.score*100).toFixed(1)}%)`);// Special handling for fruits - lower threshold\nif(knownIngredients.fruits.has(name)&&obj.score>0.4){detectedItems.add(name);}else if(obj.score>0.5){// Standard threshold for non-fruits\nconst ingredient=findIngredient(name);if(ingredient){detectedItems.add(ingredient);}}});// Update detected labels for display\nsetDetectedLabels(allDetectedLabels);console.log('Detected items:',Array.from(detectedItems));// Debug log\nreturn Array.from(detectedItems);}catch(error){console.error('Error analyzing image:',error);throw error;}};const handleFileUpload=async event=>{var _event$target$files;const file=(_event$target$files=event.target.files)===null||_event$target$files===void 0?void 0:_event$target$files[0];setError(null);setDetectedLabels([]);if(!file)return;setProcessing(true);try{const detectedIngredients=await analyzeImageWithGoogleVision(file);onIngredientsDetected(detectedIngredients);}catch(error){const errorMessage=error instanceof Error?error.message:'Unknown error occurred';console.error('Error processing image:',errorMessage);setError(errorMessage);}finally{setProcessing(false);if(fileInputRef.current){fileInputRef.current.value='';}}};return/*#__PURE__*/_jsxs(\"div\",{className:\"w-full space-y-4\",children:[/*#__PURE__*/_jsx(\"input\",{ref:fileInputRef,type:\"file\",accept:\"image/*\",capture:\"environment\",onChange:handleFileUpload,className:\"hidden\",id:\"camera-input\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex gap-2\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"camera-input\",className:\"flex-1 flex items-center justify-center p-3 rounded-lg space-x-2 transition-all hover:scale-105 cursor-pointer\",style:{backgroundColor:'#B7B7A4'},children:[/*#__PURE__*/_jsx(Camera,{className:\"w-6 h-6\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Take Photo\"})]}),/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"camera-input\",className:\"flex-1 flex items-center justify-center p-3 rounded-lg space-x-2 transition-all hover:scale-105 cursor-pointer\",style:{backgroundColor:'#B7B7A4'},onClick:()=>{if(fileInputRef.current){fileInputRef.current.removeAttribute('capture');fileInputRef.current.click();fileInputRef.current.setAttribute('capture','environment');}},children:[/*#__PURE__*/_jsx(Upload,{className:\"w-6 h-6\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Upload Photo\"})]})]}),processing&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-4 flex items-center justify-center space-x-2 p-4 rounded-lg\",style:{backgroundColor:'#FFE8D6'},children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-4 h-4 rounded-full bg-gray-600 animate-pulse\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-4 h-4 rounded-full bg-gray-600 animate-pulse delay-100\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-4 h-4 rounded-full bg-gray-600 animate-pulse delay-200\"}),/*#__PURE__*/_jsx(\"span\",{className:\"ml-2 text-gray-800\",children:\"Processing image...\"})]}),error&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-4 p-4 bg-red-100 text-red-700 rounded-lg\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"font-bold\",children:\"Error Details:\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-sm\",children:error})]})]});};export default CameraDetection;","map":{"version":3,"names":["React","useState","useRef","Camera","Upload","jsx","_jsx","jsxs","_jsxs","CameraDetection","_ref","onIngredientsDetected","processing","setProcessing","error","setError","detectedLabels","setDetectedLabels","fileInputRef","knownIngredients","fruits","Set","vegetables","proteins","pantry","ingredientSynonyms","findIngredient","label","toLowerCase","category","ingredients","Object","entries","has","mainIngredient","synonyms","includes","analyzeImageWithGoogleVision","imageFile","apiKey","process","env","REACT_APP_GOOGLE_CLOUD_API_KEY","Error","_data$responses$0$lab","_data$responses$0$loc","base64Image","Promise","resolve","reject","reader","FileReader","onload","result","split","onerror","readAsDataURL","requestBody","requests","image","content","features","type","maxResults","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","status","data","json","detectedItems","allDetectedLabels","responses","labelAnnotations","forEach","name","description","push","score","toFixed","add","ingredient","localizedObjectAnnotations","obj","console","log","Array","from","handleFileUpload","event","_event$target$files","file","target","files","detectedIngredients","errorMessage","message","current","value","className","children","ref","accept","capture","onChange","id","htmlFor","style","backgroundColor","onClick","removeAttribute","click","setAttribute"],"sources":["/Users/sanjith/ingrediate1/src/CameraDetection.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { Camera, Upload } from 'lucide-react';\n\ninterface CameraDetectionProps {\n  onIngredientsDetected: (ingredients: string[]) => void;\n}\n\nconst CameraDetection: React.FC<CameraDetectionProps> = ({ onIngredientsDetected }) => {\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [detectedLabels, setDetectedLabels] = useState<string[]>([]);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // Expanded ingredients list with categories\n  const knownIngredients = {\n    fruits: new Set([\n      'orange', 'apple', 'banana', 'lemon', 'grape', 'strawberry',\n      'blueberry', 'raspberry', 'mango', 'pineapple', 'pear', 'avocado'\n    ]),\n    vegetables: new Set([\n      'tomato', 'onion', 'garlic', 'lettuce', 'carrot', 'potato', 'cucumber',\n      'bell pepper', 'broccoli', 'spinach', 'celery', 'mushroom', 'zucchini', 'cabbage', 'cauliflower'\n    ]),\n    proteins: new Set([\n      'chicken', 'beef', 'pork', 'fish', 'salmon', 'tuna', 'shrimp', 'egg',\n      'tofu', 'meat', 'protein', 'poultry'\n    ]),\n    pantry: new Set([\n      'rice', 'pasta', 'bread', 'flour', 'sugar', 'salt', 'pepper', 'oil',\n      'vinegar', 'sauce', 'spice', 'herb', 'grain'\n    ])\n  };\n\n  // More comprehensive synonym mapping\n  const ingredientSynonyms = {\n    'orange': ['citrus', 'citrus fruit', 'mandarin', 'tangerine', 'clementine'],\n    'bell pepper': ['pepper', 'capsicum', 'sweet pepper'],\n    'onion': ['green onion', 'scallion', 'spring onion', 'red onion', 'white onion'],\n    'potato': ['potatoes', 'spud', 'sweet potato', 'yam'],\n    'tomato': ['tomatoes', 'cherry tomato', 'roma tomato'],\n    'carrot': ['carrots', 'baby carrot'],\n    'apple': ['green apple', 'red apple', 'fruit']\n  };\n\n  const findIngredient = (label: string): string | null => {\n    label = label.toLowerCase();\n    \n    // Check direct matches in all categories\n    for (const [category, ingredients] of Object.entries(knownIngredients)) {\n      if (ingredients.has(label)) {\n        return label;\n      }\n    }\n\n    // Check synonyms\n    for (const [mainIngredient, synonyms] of Object.entries(ingredientSynonyms)) {\n      if (synonyms.includes(label)) {\n        return mainIngredient;\n      }\n    }\n\n    return null;\n  };\n\n  const analyzeImageWithGoogleVision = async (imageFile: File) => {\n    const apiKey = process.env.REACT_APP_GOOGLE_CLOUD_API_KEY;\n    if (!apiKey) {\n      throw new Error('Google Cloud API key not found');\n    }\n\n    try {\n      const base64Image = await new Promise<string>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            resolve(reader.result.split(',')[1]);\n          }\n        };\n        reader.onerror = reject;\n        reader.readAsDataURL(imageFile);\n      });\n\n      const requestBody = {\n        requests: [{\n          image: { content: base64Image },\n          features: [\n            { \n              type: 'OBJECT_LOCALIZATION', \n              maxResults: 50  // Increased for multiple objects\n            },\n            { \n              type: 'LABEL_DETECTION', \n              maxResults: 50\n            }\n          ]\n        }]\n      };\n\n      const response = await fetch(\n        `https://vision.googleapis.com/v1/images:annotate?key=${apiKey}`,\n        {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(requestBody)\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`API Error: ${response.status} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      const detectedItems = new Set<string>();\n      const allDetectedLabels: string[] = [];\n\n      // Process labels with special handling for fruits\n      data.responses[0].labelAnnotations?.forEach((label: { description: string, score: number }) => {\n        const name = label.description.toLowerCase();\n        allDetectedLabels.push(`${name} (${(label.score * 100).toFixed(1)}%)`);\n        \n        // Special handling for fruits - lower threshold\n        if (knownIngredients.fruits.has(name) && label.score > 0.4) {\n          detectedItems.add(name);\n        } else if (label.score > 0.5) { // Standard threshold for non-fruits\n          const ingredient = findIngredient(name);\n          if (ingredient) {\n            detectedItems.add(ingredient);\n          }\n        }\n      });\n\n      // Process objects with special handling for fruits\n      data.responses[0].localizedObjectAnnotations?.forEach((obj: { name: string, score: number }) => {\n        const name = obj.name.toLowerCase();\n        allDetectedLabels.push(`${name} (${(obj.score * 100).toFixed(1)}%)`);\n        \n        // Special handling for fruits - lower threshold\n        if (knownIngredients.fruits.has(name) && obj.score > 0.4) {\n          detectedItems.add(name);\n        } else if (obj.score > 0.5) { // Standard threshold for non-fruits\n          const ingredient = findIngredient(name);\n          if (ingredient) {\n            detectedItems.add(ingredient);\n          }\n        }\n      });\n\n      // Update detected labels for display\n      setDetectedLabels(allDetectedLabels);\n\n      console.log('Detected items:', Array.from(detectedItems)); // Debug log\n      return Array.from(detectedItems);\n\n    } catch (error) {\n      console.error('Error analyzing image:', error);\n      throw error;\n    }\n};\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    setError(null);\n    setDetectedLabels([]);\n    \n    if (!file) return;\n\n    setProcessing(true);\n    try {\n      const detectedIngredients = await analyzeImageWithGoogleVision(file);\n      onIngredientsDetected(detectedIngredients);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      console.error('Error processing image:', errorMessage);\n      setError(errorMessage);\n    } finally {\n      setProcessing(false);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  return (\n    <div className=\"w-full space-y-4\">\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        capture=\"environment\"\n        onChange={handleFileUpload}\n        className=\"hidden\"\n        id=\"camera-input\"\n      />\n      \n      <div className=\"flex gap-2\">\n        <label\n          htmlFor=\"camera-input\"\n          className=\"flex-1 flex items-center justify-center p-3 rounded-lg space-x-2 transition-all hover:scale-105 cursor-pointer\"\n          style={{ backgroundColor: '#B7B7A4' }}\n        >\n          <Camera className=\"w-6 h-6\" />\n          <span>Take Photo</span>\n        </label>\n\n        <label\n          htmlFor=\"camera-input\"\n          className=\"flex-1 flex items-center justify-center p-3 rounded-lg space-x-2 transition-all hover:scale-105 cursor-pointer\"\n          style={{ backgroundColor: '#B7B7A4' }}\n          onClick={() => {\n            if (fileInputRef.current) {\n              fileInputRef.current.removeAttribute('capture');\n              fileInputRef.current.click();\n              fileInputRef.current.setAttribute('capture', 'environment');\n            }\n          }}\n        >\n          <Upload className=\"w-6 h-6\" />\n          <span>Upload Photo</span>\n        </label>\n      </div>\n\n      {processing && (\n        <div className=\"mt-4 flex items-center justify-center space-x-2 p-4 rounded-lg\" \n             style={{ backgroundColor: '#FFE8D6' }}>\n          <div className=\"w-4 h-4 rounded-full bg-gray-600 animate-pulse\"></div>\n          <div className=\"w-4 h-4 rounded-full bg-gray-600 animate-pulse delay-100\"></div>\n          <div className=\"w-4 h-4 rounded-full bg-gray-600 animate-pulse delay-200\"></div>\n          <span className=\"ml-2 text-gray-800\">Processing image...</span>\n        </div>\n      )}\n\n      {error && (\n        <div className=\"mt-4 p-4 bg-red-100 text-red-700 rounded-lg\">\n          <p className=\"font-bold\">Error Details:</p>\n          <p className=\"text-sm\">{error}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CameraDetection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}